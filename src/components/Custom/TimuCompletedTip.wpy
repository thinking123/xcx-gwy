<template>
  <div class="TimuCompletedTip external-cls">
    <div class="row1">
      <div class="col1">
        已刷完当前知识点
      </div>
      <canvas style="width: 750rpx; height: 296rpx;" canvas-id="canvas">
      </canvas>
    </div>
    <div class="row2">
      <div class="col1">
        本知识点统计
      </div>
      <div class="col2">
        <RightWrongTip
          text="总正确"
          :num="rightNum"
          external-cls="RightWrongTip1"
        />
        <RightWrongTip
          text="总错误"
          :num="wrongNum"
          external-cls="RightWrongTip2"
        />
      </div>
      <div class="col3">
        <CButton text="下一节" @tap.native="onNext" external-cls="btn1" />
        <CButton
          text="结束刷题"
          type="info"
          @tap.native="onCompleted"
          external-cls="btn2"
        />
      </div>
    </div>
  </div>
</template>
<script>
import wepy from '@wepy/core';
import { navBack } from '@/common/navUtils';

wepy.component({
  data: {
    width: 0,
    height: 0,
    windowWidth: 0,
    drawed: 0
  },
  externalClasses: ['external-cls'],
  props: {
    rightRate: Number,
    rightNum: Number,
    wrongNum: Number,
    showCompleted: Boolean
  },
  events: {},
  computed: {},
  watch: {
    showCompleted(v) {
      v && this.draw();
    }
  },
  methods: {
    onNext() {
      navBack();
    },

    onCompleted() {
      navBack();
    },

    rpxTopx(rpx) {
      return (this.windowWidth / 750) * rpx;
    },
    degreeToRadian(deg) {
      return (Math.PI / 180) * deg;
    },
    getCenter() {
      const x = this.rpxTopx(750) / 2;
      const y = this.rpxTopx(296) / 2;
      // const y = 0;
      const startP = -Math.asin(62 / 138) - Math.PI;
      const endP = Math.asin(62 / 138);
      const r = this.rpxTopx(138);
      const step = 0.01;
      return { x, y, r, startP, endP, step };
    },
    drawBg() {
      const c = this.ctx;
      const { x, y, r, startP, endP } = this.getCenter();
      c.setGlobalAlpha(0.2);
      c.beginPath();
      this.ctx.setLineCap('round');
      c.setLineWidth(4);
      c.setStrokeStyle('#FFF');
      c.arc(x, y, r, startP, endP);
      c.stroke();
    },
    drawPg() {
      const c = this.ctx;
      const { x, y, r, startP, endP, step } = this.getCenter();
      const totalP = endP - startP;
      let drawed = this.drawed + step;
      const end = startP + totalP * drawed;
      c.setGlobalAlpha(1);
      c.beginPath();
      this.ctx.setLineCap('round');
      c.setLineWidth(4);
      c.setStrokeStyle('#FFF');
      c.arc(x, y, r, startP, end);
      c.stroke();

      this.drawed = drawed;
      this.drawBg();
      this.drawText(drawed);
      c.draw();
      if (this.drawed > this.rightRate) {
        return;
      }
      this.requestAnimationFrame(this.drawPg.bind(this));
    },
    drawText(drawed) {
      const { x, y } = this.getCenter();
      this.ctx.setGlobalAlpha(1);
      this.ctx.textAlign = 'center';
      // this.ctx.font = `${this.fontSize}px`;
      this.ctx.setFillStyle('#FFF');
      this.ctx.setFontSize(this.rpxTopx(48));
      this.ctx.textBaseline = 'middle';
      const text = (drawed * 100).toFixed(0);
      this.ctx.fillText(`${text}%`, x, y);

      this.ctx.setGlobalAlpha(0.2);
      this.ctx.textAlign = 'center';
      // this.ctx.font = `${this.fontSize}px`;
      this.ctx.setFillStyle('#FFF');
      this.ctx.setFontSize(this.rpxTopx(32));
      this.ctx.textBaseline = 'middle';

      this.ctx.fillText('正确率', x, y + this.rpxTopx(56));
    },
    draw() {
      // const ctx = this.ctx;
      const ctx = wx.createCanvasContext('canvas', this.$wx);
      this.ctx = ctx;
      this.ctx.lineCap = 'round';
      this.ctx.setLineCap('round');
      //   ctx.moveTo(10, 10)
      // ctx.lineTo(100, 10)
      // ctx.lineTo(100, 100)
      // ctx.fill()
      // ctx.draw()
      // ctx.moveTo(10, 10)
      // ctx.lineTo(100, 10)
      // ctx.lineTo(100, 100)
      // ctx.fill()
      // ctx.draw()
      this.drawBg();
      this.drawPg();
    },
    requestAnimationFrame(cb) {
      var start, finish;
      setTimeout(function() {
        start = +new Date();
        cb(start);
        finish = +new Date();
      }, 16);
    }
  },
  attached() {},
  created() {
    const { windowWidth } = wx.getSystemInfoSync();
    this.windowWidth = windowWidth;

    // this.ctx = wx.createCanvasContext('canvas' , this.$wx);
    // console.log('this.ctx',this,this.$wx ,this.ctx,)
  }
});
</script>
<style lang="scss">
.TimuCompletedTip {
  .row1 {
    background: rgba(29, 146, 251, 1);
    padding-top: 40rpx;
    .col1 {
      font-size: 32rpx;
      font-family: PingFang-SC-Regular, PingFang-SC;
      font-weight: 400;
      color: rgba(255, 255, 255, 1);
      line-height: 40rpx;
      margin: 0 0 96rpx;

      display: flex;
      align-items: center;
      justify-content: center;
    }
  }
  .row2 {
    height: 720rpx;
    background: #fff;
    .col1 {
      font-size: 32rpx;
      font-family: PingFangSC-Semibold, PingFangSC;
      font-weight: 600;
      color: rgba(102, 102, 102, 1);

      margin: 0 40rpx 48rpx;
      height: 112rpx;
      display: flex;
      align-items: center;
      position: relative;

      &::after {
        position: absolute;
        width: 670rpx;
        content: '';
        bottom: 0;
        height: 1px;
        left: 50%;
        transform: scaleY(0.5) translateX(-50%);
        background: rgba(216, 216, 216, 1);
      }
    }

    .col2 {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 64rpx;
      .RightWrongTip1 {
        background: linear-gradient(
          225deg,
          rgba(219, 249, 99, 0.1) 0%,
          rgba(68, 203, 69, 0.1) 100%
        );
        margin-right: 110rpx;
      }
      .RightWrongTip2 {
        color: rgba(254, 72, 50, 1);
        background: linear-gradient(
          230deg,
          rgba(249, 187, 112, 0.1) 0%,
          rgba(254, 72, 50, 0.1) 100%
        );
      }
    }

    .col3 {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 40rpx;
      .btn1 {
        width: 690rpx;
        height: 96rpx;
        margin-bottom: 24rpx;
        font-size: 36rpx;
      }
      .btn2 {
        width: 690rpx;
        height: 96rpx;
        margin-bottom: 24rpx;
        font-size: 36rpx;
      }
    }
  }
}
</style>
<config>
  {
  navigationBarTitleText: '',
  usingComponents: {
  RightWrongTip:'~Custom/RightWrongTip',
  CButton:'~UI/CButton',
  }
  }
</config>
