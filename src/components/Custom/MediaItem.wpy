<template>
  <div
    class="MediaItem external-cls"
    :class="{
      MediaItem__isLearning: isLearning,
      MediaItem__text: typeItem == 'text'
    }"
    @click="onNav"
  >
    <image
      :src="icon3"
      class="icon3"
      mode="aspectFit"
      @click="onPlay"
      v-show="typeItem == 'text'"
    />

    <div class="wrap">
      <div class="row1">
        {{ media.titel }}
      </div>
      <div class="row2">
        <span>{{ media.time }}</span> | <span>{{ media.numStudents }}</span
        >人学过 | 已学 <span>{{ media.learned * 100 }}</span
        >%
      </div>
      <div class="row3" v-if="type != 'text'">
        <span>学友评价</span>
        <CRate :rate="media.score" external-cls="cRate" />
      </div>

      <block v-if="typeItem != 'text'">
        <image
          :src="icon1"
          v-if="isLearning"
          class="icon"
          mode="aspectFit"
          @click="onClick"
        />
        <image
          :src="icon2"
          v-else
          class="icon"
          mode="aspectFit"
          @click="onClick"
        />
      </block>
    </div>
  </div>
</template>
<script>
import wepy from '@wepy/core';
import { getImgUrlEx } from '@/common/utils';
import store from 'store';
import { mapGetters } from '@wepy/x';
import { navToPage } from '@/common/navUtils';

wepy.component({
  store,
  data: {
    icon2: 'icon_video_play@3x',
    icon1: 'btn_audio_on@3x',
    icon3: 'icon_video_play@3x'
  },
  externalClasses: ['external-cls'],
  props: {
    media: {
      type: Object,
      default: {}
    },
    //play , text
    typeItem: {
      type: String,
      default: 'play'
    }
  },
  events: {},
  computed: {
    ...mapGetters(['playMedia', 'isMediaPlaying']),
    isLearning() {
      if (this.typeItem == 'text') {
        return false;
      }
      return (
        this.playMedia &&
        this.media.id == this.playMedia.id &&
        this.isMediaPlaying
      );
    }
  },
  methods: {
    onNav() {
      navToPage('/pages/section2/mediaPlayDetail', {
        media: JSON.stringify(this.media)
      });
    },
    onClick() {
      // this.$emit('change', this.media);
    },
    onPlay() {
      // this.$emit('change', this.media);
    }
  },
  created() {
    this.icon2 = getImgUrlEx(this.icon2);
    this.icon1 = getImgUrlEx(this.icon1);
    this.icon3 = getImgUrlEx(this.icon3);
  }
});
</script>
<style lang="scss">
.MediaItem {
  box-sizing: border-box;
  width: 690rpx;
  height: 240rpx;
  position: relative;
  padding: 40rpx 30rpx;
  background: rgba(255, 255, 255, 1);

  position: relative;

  .wrap {
    width: 100%;
    height: 100%;
  }
  &.MediaItem__text {
    display: flex;
    align-items: center;
    .wrap {
      width: auto;
      flex: 1;
    }

    width: 690rpx;
    height: 192rpx;
  }
  &::after {
    position: absolute;
    width: 100%;
    content: '';
    bottom: 0;
    height: 1px;
    left: 0;
    background: rgba(242, 242, 242, 1);
  }

  .icon3 {
    width: 56rpx;
    height: 56rpx;
    margin-left: 40rpx;
    margin-right: 32rpx;
  }
  .row1 {
    font-size: 36rpx;
    font-family: PingFang-SC-Regular, PingFang-SC;
    font-weight: 400;
    color: rgba(0, 0, 0, 1);
    line-height: 44rpx;
    margin-bottom: 32rpx;
  }

  .row2 {
    font-size: 28rpx;
    font-family: PingFang-SC-Regular, PingFang-SC;
    font-weight: 400;
    color: rgba(98, 100, 102, 1);
    line-height: 36rpx;
    margin-bottom: 18rpx;

    > label {
      margin: 0 8rpx;
    }
  }

  .row3 {
    font-size: 24rpx;
    font-family: PingFang-SC-Regular, PingFang-SC;
    font-weight: 400;
    color: rgba(147, 150, 153, 1);
    line-height: 32rpx;
    display: flex;
    align-items: center;
    > label {
      margin-right: 16rpx;
      display: inline-block;
      white-space: nowrap;
    }
  }
  .cRate {
    transform: scale(0.5);
    transform-origin: left center;
  }

  .icon {
    width: 64rpx;
    height: 48rpx;
    position: absolute;
    right: 40rpx;
    bottom: 40rpx;
  }

  &.MediaItem__isLearning {
    .row1 {
      color: rgba(79, 172, 27, 1);
    }
  }
}
</style>

<config>
  {
  navigationBarTitleText: '',
  usingComponents: {
  CRate:'~UI/CRate'
  }
  }
</config>
