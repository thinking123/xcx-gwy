<template>
  <div class="LearningFloat external-cls" @click="onNav" v-show="!!learnTime">
    <image src="icon_inlearning@3x" />
    <span class="text">
      {{ text }}
    </span>
    <span class="time"> {{ time }}分钟 </span>
  </div>
</template>
<script>
import wepy from '@wepy/core';
import { getImgUrlEx } from '@/common/utils';
import { navToPage } from '@/common/navUtils';
import { mapGetters, mapMutations } from '@wepy/x';
import { updateLocalLearnTime } from '@/http/http-business';
import store from 'store';

wepy.component({
  store,
  data: {
    time: 0
  },
  externalClasses: ['external-cls'],
  props: {},
  events: {},
  watch: {
    learnTime(l, ol) {
      if (!this.timer && l && !ol) {
        this.init(l);
      }
    }
  },
  computed: {
    ...mapGetters(['learnTime']),
    text() {
      if (this.learnTime) {
        const state = this.learnTime.learnState;
        return state == 1 ? '正在学习' : state == 2 ? '暂停学习' : '学习结束';
      }
      return '';
    }
  },
  methods: {
    ...mapMutations(['setLearnTime']),
    onNav() {
      navToPage('/pages/section1/timer');
    },
    init(l) {
      if (l) {
        const { remaindLearnTime, learnTime } = l;
        // 分钟 start
        const start = Math.floor((learnTime - remaindLearnTime) / 60.0);
        this.time = start;
        this.timer = setInterval(() => {
          const { remaindLearnTime } = this.learnTime;
          const rd = remaindLearnTime - 1;
          this.time = Math.floor((learnTime - rd) / 60.0);

          let lt = null;
          if (rd < 0) {
            clearInterval(this.timer);
            this.timer = null;
            lt = { ...this.learnTime, remaindLearnTime: 0, learnState: 3 };
          } else {
            lt = { ...this.learnTime, remaindLearnTime: rd };
          }

          updateLocalLearnTime(lt);
        }, 1000);
      }
    },
    clear() {
      if (this.timer) {
        clearInterval(this.timer);
        this.timer = null;
      }
    }
  },
  pageLifetimes: {
    show() {
      this.init(this.learnTime);
      console.log('show');
    },
    hide() {
      this.clear();
      console.log('hide');
    }
  },
  attached() {
    // this.init(this.learnTime);
  },
  detached() {
    this.clear();
  }
});
</script>
<style lang="scss">
@import '~baseUI';
.LearningFloat {
  position: fixed;
  z-index: $zIndexMiddle;
  right: 0;
  top: 0;
  width: 160rpx;
  height: 168rpx;
  background: $white;
  box-shadow: 0px 4rpx 8rpx 0px rgba(0, 0, 0, 0.3);
  border-radius: 8rpx;
  display: flex;
  flex-direction: column;
  align-items: center;
  > image {
    width: 48rpx;
    height: 48rpx;
    margin-top: 20rpx;
  }
  .text {
    font-size: 24rpx;
    font-weight: 400;
    color: $textColorGray;
    line-height: 24rpx;
    margin-top: 20rpx;
  }

  .time {
    font-size: 24rpx;
    font-weight: 400;
    color: $primaryColor;
    line-height: 24rpx;
    margin-top: 12rpx;
  }
}
</style>
