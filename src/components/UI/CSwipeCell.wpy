<template>
  <view
    class="c-swipe-cell external-cls"
    data-key="cell"
    catchtap="onClick"
    bindtouchstart="startDrag"
    catchtouchmove="{{ catchMove ? 'noop' : '' }}"
    capture-bind:touchmove="onDrag"
    catchtouchend="endDrag"
    catchtouchcancel="endDrag"
  >
    <view v-bind:style="wrapperStyle">
      <view wx:if="{{ leftWidth }}" class="c-swipe-cell__left left-cls" data-key="left" catch:tap="onClick">
        <slot name="left" />
      </view>
      <slot />
      <view wx:if="{{ rightWidth }}" class="c-swipe-cell__right right-cls" data-key="right" catch:tap="onClick">
        <slot name="right" />
      </view>
    </view>
  </view>

</template>
<script>
  import wepy from '@wepy/core'
  import {touch} from '@/mixins/touch';
  import {rpxTopx} from '@/common/utils';

  const THRESHOLD = 0.3;

  wepy.component({
    options: {
      multipleSlots: true // 在组件定义时的选项中启用多slot支持
    },
    data: {
      catchMove: false,
      wrapperStyle:''
    },
    externalClasses:[
      'external-cls',
      'right-cls'
    ],
    mixins: [touch],
    props:{
      disabled: Boolean,
      leftWidth: {
        type: Number,
        default: 0
      },
      rightWidth: {
        type: Number,
        default: 0
      },
      asyncClose: Boolean
    },
    events: {

    },
    computed:{

    },
    methods: {

      open(position) {
        let { leftWidth, rightWidth } = this;
        rightWidth = rpxTopx(rightWidth);

        const offset = position === 'left' ? leftWidth : -rightWidth;
        this.swipeMove(offset);
      },

      close() {
        this.swipeMove(0);
      },

      swipeMove(offset= 0) {
        this.offset = offset;

        const transform = `translate3d(${offset}px, 0, 0)`;
        const transition = this.draging
          ? 'none'
          : 'transform .6s cubic-bezier(0.18, 0.89, 0.32, 1)';

        this.wrapperStyle = `
        -webkit-transform: ${transform};
        -webkit-transition: ${transition};
        transform: ${transform};
        transition: ${transition};
      `
      },

      swipeLeaveTransition() {
        let { leftWidth, rightWidth } = this;
        const { offset } = this;

        rightWidth = rpxTopx(rightWidth);
        if (rightWidth > 0 && -offset > rightWidth * THRESHOLD) {
          this.open('right');
        } else if (leftWidth > 0 && offset > leftWidth * THRESHOLD) {
          this.open('left');
        } else {
          this.swipeMove(0);
        }
        this.catchMove = false;
      },

      startDrag(event) {
        if (this.disabled) {
          return;
        }

        this.draging = true;
        this.startOffset = this.offset;
        this.firstDirection = '';
        this.touchStart(event);
      },

      noop() {},

      onDrag(event) {
        if (this.disabled) {
          return;
        }

        this.touchMove(event);

        if (!this.firstDirection) {
          this.firstDirection = this.direction;
          this.catchMove = this.firstDirection === 'horizontal';
        }

        if (this.firstDirection === 'vertical') {
          return;
        }

        const { leftWidth, rightWidth } = this;

        const offset = this.startOffset + this.deltaX;

        if (
          (rightWidth > 0 && -offset > rightWidth) ||
          (leftWidth > 0 && offset > leftWidth)
        ) {
          return;
        }

        this.swipeMove(offset);
      },

      endDrag() {
        if (this.disabled) {
          return;
        }

        this.draging = false;
        this.swipeLeaveTransition();
      },

      onClick(event) {
        const { key: position = 'outside' } = event.currentTarget.dataset;
        this.$emit('click', position);

        if (!this.offset) {
          return;
        }

        if (this.asyncClose) {
          this.$emit('close', { position, instance: this });
        } else {
          this.swipeMove(0);
        }
      }
    },
    created(){
      this.offset = 0;
    },
    onLoad () {

    }
  });
</script>
<style lang="less">

  @import "~lessUI";
  .c-swipe-cell {
    position: relative;
    overflow: hidden;

    &__left,
    &__right {
      position: absolute;
      top: 0;
      height: 100%;
    }

    &__left {
      left: 0;
      transform: translate3d(-100%, 0, 0);
    }

    &__right {
      right: 0;
      transform: translate3d(100%, 0, 0);
    }
  }

</style>
