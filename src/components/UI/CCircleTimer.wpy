<template>
  <div class="CCircleTimer external-cls">
    <canvas
      style="width: {{width}}rpx; height: {{height}}rpx;"
      canvas-id="canvas"
    >
    </canvas>
  </div>
</template>
<script>
import wepy from '@wepy/core';
import Circle from './CircleTimer';
import { learnTimeSuspend } from '@/http/http-business';
import { mapGetters, mapState, mapMutations } from '@wepy/x';

wepy.component({
  data: {},
  externalClasses: ['external-cls'],
  props: {
    width: {
      type: Number,
      default: 750
    },
    height: {
      type: Number,
      default: 750
    },
    startTime: {
      type: Date,
      default: new Date()
    },
    endTime: {
      type: Date,
      default: new Date()
    },
    secRadius: {
      type: Number,
      default: 430
    },
    minRadius: {
      type: Number,
      default: 510
    },
    hourRadius: {
      type: Number,
      default: 630
    }
  },
  watch: {
    endTime(v) {
      // if (this.circle) {
      //   const offset = 1000 * (26 + 3 * 60 + 2 * 3600);
      //   const t = new Date(new Date().setTime(new Date().getTime() + offset));
      //   this.circle.setTimeRange(new Date(), t);
      // }
    }
  },
  events: {},
  computed: {
    ...mapGetters(['learnTime'])
  },
  methods: {
    pauseCb() {
      const { lastTime } = this.learnTime;
      const rd = (new Date().getTime() - lastTime) / 1000;
      return learnTimeSuspend(this.learnTime.id, rd, 2).then(() => {});
    },
    stopCb() {
      return learnTimeSuspend(this.learnTime.id, '', 3).then(() => {});
    },
    resumeCb() {
      return learnTimeSuspend(this.learnTime.id, '', 1).then(() => {});
    }
  },
  attached() {
    this.circle = new Circle({
      startTime: new Date(),
      endTime: new Date() + this.learnTime.remaindLearnTime * 1000,
      width: this.width,
      height: this.height,
      secRadius: this.secRadius,
      minRadius: this.minRadius,
      hourRadius: this.hourRadius,
      pauseCb: this.pauseCb.bind(this),
      stopCb: this.stopCb.bind(this),
      resumeCb: this.resumeCb.bind(this),
      isPause: this.learnTime.learnState == 1,
      isStop: this.learnTime.learnState == 2
    });
  },
  onLoad() {
    // this.circle.render();
  }
});
</script>
<style lang="scss">
.CCircleTimer {
  width: 100%;
  height: 100%;
}
</style>
