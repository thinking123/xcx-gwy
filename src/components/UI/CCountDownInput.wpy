<template>
  <div class="CCountDownInput external-cls" :class="{'bottomLine':showLine}">
    <span v-if="!!label" class="label">{{label}}</span>
    <input @input="handleInput" :value="val"
           :placeholder="placeholder"/>
    <image src="/static/icon/btn_reset_gray.png"
           v-show="!!val"
           @click="handleClear"
           class="close"/>
    <span class="countDown" :class="{'counting':isCounting}" @click="handleCountDown">
      {{isCounting ? countDownText + ' 后(重发)' : countDownText}}
    </span>
  </div>
</template>
<script>
  import wepy from '@wepy/core'
  import {getImgUrl , isFunction} from '@/common/utils';

  wepy.component({
    data: {
      close:'/static/icon/btn_reset_gray.png',
      isCounting:false,
      start:'获取验证码',
      end:'(重新发送)',
      countDownText:'获取验证码'
    },
    externalClasses:[
      'external-cls'
    ],
    props:{
      label:String,
      val:{
        type:String,
        default:''
      },
      placeholder:{
        type:String,
        default:"请输入"
      },
      showLine:{
        type:Boolean,
        default: true
      },
      beforeCheck:{
        type:Object,
        default:function() {
          return {
            check:function() {
              return true;
            }
          }
        }
      },
      beforefun:{
        type:Function,
        default:()=>{}
      },
      countNum:{
        type:Number,
        default:60
      }
    },
    events: {

    },
    computed:{

    },
    methods: {
      handleInput(e){
        const v = e.$wx.detail.value
        this.$emit('update:val' , v)
      },
      handleClear(){
        this.$emit('update:val' , '')
      },
      handleCountDown(){
        if(this.isCounting){
          return
        }
        if(this.$parent && isFunction(this.$parent.countCheck)){
          if(this.$parent.countCheck(this.val)){
            this.countDown()
          }
        }else {
          this.countDown()
        }
      },
      countDown(){
        this.isCounting = true;
        this.countDownText = this.countNum
        this.time = setInterval(()=>{
          if(this.countDownText > 0){
            this.countDownText = --this.countDownText;
          }else{
            this.isCounting = false;
            this.countDownText = this.end;
          }

        } , 1000)
      }
    },
    onUnload(){
      clearInterval(this.time);
      this.time = null;
    },
    onLoad () {
      this.close = getImgUrl(this.close);
    }
  });
</script>
<style lang="scss">
  @import "~baseUI";


  .CCountDownInput{
    display: flex;
    align-items: center;
    width: 630rpx;
    height: 120rpx;
    position: relative;


    &.bottomLine::after{
      position: absolute;
      bottom: 0;
      left:50%;
      transform: translateX(-50%);
      width: 630rpx;
      height: 1px;
      background-color: $lineColor;
      content: '';
    }
    >input{
      font-size:32rpx;
      font-weight:400;
      color:#000000;
      line-height:32rpx;
      caret-color: $primayColor;
      padding-right: 50rpx;
      width:256rpx;
    }
    input::placeholder {
      color: #CCCCCC;
    }
    .label{
      margin-right: 40rpx;
      color: #666666;
      font-size:32rpx;
      font-weight:400;
      line-height:32rpx;
    }
    .close{
      width: 44rpx;
      height: 44rpx;
      position: absolute;
      right: 200rpx;
      top:50%;
      transform: translateY(-50%);
    }

    .countDown{
      display: flex;
      align-items: center;
      justify-content: center;
        width: 190rpx;
        color:$primayColor;
      position: relative;
      font-size:32rpx;
      font-weight:400;
      line-height:32px;
      &::before{
        position: absolute;
        left: 0;
        top:50%;
        transform: translateY(-50%);
        width: 2rpx;
        height: 60rpx;
        background-color: $lineColor;
        content: '';
      }
        &.counting{
          color:#B3B3B3;
        }
    }
  }
</style>
