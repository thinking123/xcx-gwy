<template>
  <div class="CCountDownInput external-cls" :class="{ bottomLine: showLine }">
    <span v-if="!!label" class="label">{{ label }}</span>
    <div class="inputWrap">
      <input
        @input="handleInput"
        :type="type"
        :value="val"
        :placeholder="placeholder"
      />
      <div class="imageWrap" v-show="!!val" @click.capture="handleClear">
        <image src="btn_reset_gray" v-show="!!val" class="close" />
      </div>
    </div>

    <span
      class="countDown"
      :class="{ counting: isCounting }"
      @click="handleCountDown"
    >
      {{ isCounting ? countDownText + ' 后(重发)' : countDownText }}
    </span>
  </div>
</template>
<script>
import wepy from '@wepy/core';
import { getImgUrl, isFunction } from '@/common/utils';

wepy.component({
  data: {
    isCounting: false,
    start: '获取验证码',
    end: '(重新发送)',
    countDownText: '获取验证码'
  },
  externalClasses: ['external-cls'],
  props: {
    label: String,
    val: {
      type: String,
      default: ''
    },
    placeholder: {
      type: String,
      default: '请输入'
    },
    showLine: {
      type: Boolean,
      default: true
    },
    beforeCheck: {
      type: Object,
      default: function() {
        return {
          check: function() {
            return true;
          }
        };
      }
    },
    beforefun: {
      type: Function,
      default: () => {}
    },
    countNum: {
      type: Number,
      default: 60
    },
    type: {
      type: String,
      default: 'text'
    }
  },
  events: {},
  computed: {},
  methods: {
    handleInput(e) {
      const v = e.$wx.detail.value;
      this.$emit('update:val', v);
    },
    handleClear() {
      this.$emit('update:val', '');
    },
    async handleCountDown() {
      if (this.isCounting) {
        return;
      }
      if (this.$parent && isFunction(this.$parent.countCheck)) {
        const isOk = await this.$parent.countCheck(this.val);
        if (isOk) {
          this.countDown();
        }
      } else {
        this.countDown();
      }
    },
    reset() {
      if (this.time) {
        clearInterval(this.time);
        this.time = null;
      }
    },
    countDown() {
      this.isCounting = true;
      this.countDownText = this.countNum;
      this.time = setInterval(() => {
        if (this.countDownText > 1) {
          this.countDownText = --this.countDownText;
        } else {
          this.reset();
          this.isCounting = false;
          this.countDownText = this.end;
        }
      }, 1000);
    }
  },
  onUnload() {
    this.reset();
  },
  onLoad() {}
});
</script>
<style lang="scss">
@import '~baseUI';

.CCountDownInput {
  display: flex;
  align-items: center;
  width: 630rpx;
  height: 120rpx;
  position: relative;

  &.bottomLine::after {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 630rpx;
    height: 1px;
    background-color: $lineColor;
    content: '';
  }
  > input {
    font-size: 32rpx;
    font-weight: 400;
    color: #000000;
    line-height: 32rpx;
    caret-color: $primaryColor;
    // padding-right: 50rpx;
    width: 240rpx;
  }
  .inputWrap {
    width: 250rpx;
    input {
      font-size: 32rpx;
      font-weight: 400;
      color: #000000;
      line-height: 32rpx;
      caret-color: $primaryColor;
      // padding-right: 50rpx;
      width: 180rpx;
    }
    input::placeholder {
      color: #cccccc;
    }

    .imageWrap {
      position: absolute;
      right: 225rpx;
      top: 50%;
      transform: translateY(-50%);
      .close {
        width: 44rpx;
        height: 44rpx;
      }

      &::after {
        content: '';
        position: absolute;
        width: 80rpx;
        height: 80rpx;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
    }
  }

  .label {
    width: 166rpx;
    /*margin-right: 40rpx;*/
    color: #666666;
    font-size: 32rpx;
    font-weight: 400;
    line-height: 32rpx;
  }

  .countDown {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 190rpx;
    color: $primaryColor;
    position: relative;
    font-size: 32rpx;
    font-weight: 400;
    line-height: 32px;
    &::before {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      width: 2rpx;
      height: 60rpx;
      background-color: $lineColor;
      content: '';
    }
    &.counting {
      color: #b3b3b3;
    }
  }
}
</style>
