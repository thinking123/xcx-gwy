<template>
  <div class="CCollapseItem external-cls">
    <div
      class="c-collapse-item collapse-item"
      :class="{ 'c-collapse--expanded': expanded }"
      bind:click="onClick"
    >
      <span class="c-collapse-title">{{ title }}</span>
      <image src="btn_arrowdown_gray@3x" class="icon" />
    </div>
    <view
      :class="{ 'c-collapse__wrapper--transition': transition }"
      style="height: {{ contentHeight }};"
      class="c-collapse__wrapper"
      bind:transitionend="onTransitionEnd"
    >
      <view class="c-collapse-item__content content-class">
        <slot />
      </view>
    </view>
  </div>
</template>
<script>
import wepy from '@wepy/core';
import { getImgUrlEx } from '@/common/utils';
import { basic } from '@/mixins/basic';

const nextTick = () => new Promise(resolve => setTimeout(resolve, 20));
wepy.component({
  externalClasses: [
    'title-class',
    'content-class',
    'external-cls',
    'collapse-item'
  ],

  relations: {
    './CCollapse': {
      type: 'ancestor', // 关联的目标节点应为父节点
      linked(parent) {
        this.$wepy.parent = parent.$wepy;
      }
    }
  },
  mixins: [basic],
  props: {
    name: String,
    title: String,
    value: String
  },

  data: {
    contentHeight: 0,
    expanded: false,
    transition: false
  },

  attached() {
    this.updateExpanded()
      .then(nextTick)
      .then(() => {
        const data = { transition: true };

        if (this.expanded) {
          this.contentHeight = 'auto';
        }

        // this.setData(data);
        this.transition = true;
        console.log(' this.transition ', this.transition);
      });
  },

  methods: {
    updateExpanded() {
      if (!this.parent) {
        return Promise.resolve();
      }

      const { value, accordion } = this.parent;
      const { children = [] } = this.parent;
      const { name } = this;

      const index = children.indexOf(this);
      const currentName = name == null ? index : name;

      const expanded = accordion
        ? value === currentName
        : (value || []).some(name => name === currentName);

      const stack = [];

      if (expanded !== this.expanded) {
        stack.push(this.updateStyle(expanded));
      }

      this.index = index;
      this.expanded = expanded;

      return Promise.all(stack);
    },

    updateStyle(expanded) {
      return this.getRect('.c-collapse-item__content')
        .then(rect => rect.height)
        .then(height => {
          if (expanded) {
            this.contentHeight = height ? `${height}px` : 'auto';
            return;
          }
          this.contentHeight = `${height}px`;

          return nextTick().then(() => (this.contentHeight = 0));
        });
    },

    onClick() {
      const { name, expanded } = this;
      const index = this.parent.children.indexOf(this);
      const currentName = name == null ? index : name;

      this.parent.switch(currentName, !expanded);
    },

    onTransitionEnd() {
      if (this.expanded) {
        this.contentHeight = 'auto';
      }
    }
  }
});
</script>
<style lang="less">
@import '~lessUI';

/*.c-collapse-item {*/
/*  width:750rpx;*/
/*  height:120rpx;*/
/*  background:rgba(242,242,242,1);*/
/*  padding: 40rpx 30rpx;*/
/*  box-sizing: border-box;*/
/*  display: flex;*/
/*  align-items: center;*/
/*  justify-content: space-between;*/
/*  .icon{*/
/*    width:28rpx;*/
/*    height:20rpx;*/
/*  }*/

/*}*/

.c-collapse {
  &-item {
    width: 750rpx;
    height: 120rpx;
    padding: 40rpx 30rpx;
    box-sizing: border-box;
    display: flex;
    align-items: center;
    justify-content: space-between;
    .icon {
      width: 28rpx;
      height: 20rpx;
      transition: all 0.3s;
    }
  }

  &--expanded {
    .icon {
      transform: rotate(180deg);
    }
  }

  &__title {
    .c-cell__right-icon {
      transform: rotate(90deg);
      transition: transform @collapse-item-transition-duration;
    }

    &--expanded {
      .c-cell__right-icon {
        transform: rotate(-90deg);
      }
    }

    &--disabled {
      .c-cell,
      .c-cell__right-icon {
        color: @collapse-item-title-disabled-color !important;
      }

      .c-cell--hover {
        background-color: @white !important;
      }
    }
  }

  &__wrapper {
    overflow: hidden;

    &--transition {
      transition: height 300ms ease-in-out;
    }
  }

  &__content {
    padding: @collapse-item-content-padding;
    color: @collapse-item-content-text-color;
    font-size: @collapse-item-content-font-size;
    line-height: @collapse-item-content-line-height;
    background-color: @collapse-item-content-background-color;
  }
}
</style>
