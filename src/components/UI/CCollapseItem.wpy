<template>
    <div class="CCollapseItem external-cls">
      <div
        class="c-collapse-item"
        :class="{'collapse-item--expanded':expanded}"
        bind:click="onClick"
      >
        <span>{{title}}</span>
        <image :src="icon" class="icon"/>
      </div>
      <view
        :class="{'collapse-item--transition':transition}"
        style="height: {{ contentHeight }};"
        bind:transitionend="onTransitionEnd"
      >
        <view
          class="c-collapse-item__content content-class"
        >
          <slot />
        </view>
      </view>
    </div>
</template>
<script>
  import wepy from '@wepy/core'
  import {getImgUrlEx} from '@/common/utils';
  import {basic} from '@/mixins/basic';

  const nextTick = () => new Promise(resolve => setTimeout(resolve, 20));
  wepy.component({
    externalClasses: ['title-class', 'content-class' , 'external-cls'],

    relations: {
      './CCollapse': {
        type: 'ancestor', // 关联的目标节点应为父节点
        linked(parent) {
          this.$wepy.parent = parent.$wepy;
        }
      },
      // name: 'CCollapse',
      // type: 'ancestor',
      // linked(parent) {
      //   this.parent = parent;
      // }
    },
    mixins:[basic],
    props: {
      name: String,
      title: String,
      value: String
    },

    data: {
      contentHeight: 0,
      expanded: false,
      transition: false,
      icon:'icon_arrowdown@3x'
    },

    created(){
      this.icon = getImgUrlEx(this.icon);
    },
    attached() {
      // this.parent = this.$parent;
      // this.updateExpanded()
      //   .then(nextTick)
      //   .then(() => {
      //     this.transition = true;
      //     if (this.expanded) {
      //       this.contentHeight = 'auto';
      //     }
      //   });

      this.updateExpanded()
        .then(nextTick)
        .then(() => {
          const data = { transition: true };

          if (this.expanded) {
            this.contentHeight = 'auto';
          }

          // this.setData(data);
          this.transition = true;
        });

    },

    methods: {
      updateExpanded() {
        if (!this.parent) {
          return Promise.resolve();
        }

        const { value, accordion } = this.parent;
        const { children = [] } = this.parent;
        const { name } = this;

        const index = children.indexOf(this);
        const currentName = name == null ? index : name;

        const expanded = accordion
          ? value === currentName
          : (value || []).some((name) => name === currentName);

        const stack = [];

        if (expanded !== this.expanded) {
          stack.push(this.updateStyle(expanded));
        }

        this.index = index;
        this.expanded = expanded;

        return Promise.all(stack);
      },

      updateStyle(expanded) {
        return this.getRect('.c-collapse-item__content')
          .then((rect) => rect.height)
          .then((height) => {
            if (expanded) {
              this.contentHeight =  height ? `${height}px` : 'auto';
              return;
            }
            this.contentHeight =  `${height}px`;

            return nextTick().then(() => this.contentHeight = 0);
          });
      },

      onClick() {
        const { name, expanded } = this;
        const index = this.parent.children.indexOf(this);
        const currentName = name == null ? index : name;

        this.parent.switch(currentName, !expanded);
      },

      onTransitionEnd() {
        if (this.expanded) {
          this.contentHeight = 'auto';
        }
      }
    }
  });
</script>
<style lang="less">
  @import '~lessUI';

  .c-collapse-item {

    .icon{
      width:28rpx;
      height:16rpx;
    }
    &__title {
      .c-cell__right-icon {
        transform: rotate(90deg);
        transition: transform @collapse-item-transition-duration;
      }

      &--expanded {
        .c-cell__right-icon {
          transform: rotate(-90deg);
        }
      }

      &--disabled {
        .c-cell,
        .c-cell__right-icon {
          color: @collapse-item-title-disabled-color !important;
        }

        .c-cell--hover {
          background-color: @white !important;
        }
      }
    }

    &__wrapper {
      overflow: hidden;

      &--transition {
        transition: height 300ms ease-in-out;
      }
    }

    &__content {
      padding: @collapse-item-content-padding;
      color: @collapse-item-content-text-color;
      font-size: @collapse-item-content-font-size;
      line-height: @collapse-item-content-line-height;
      background-color: @collapse-item-content-background-color;
    }
  }
</style>
