<template>
  <view class="CListWrap external-cls"
  >

    <view class="CListWrap-wrap">

      <slot/>

    </view>
    <view class="CListWrap-loading">

    </view>
    <view class="CListWrap-dst">
      <view wx:if="{{isLoading}}">
        isLoading...
      </view>
      <view wx:if="{{isEnd}}">
        isEnd...
      </view>
    </view>

  </view>

</template>
<script>
  import wepy from '@wepy/core'
  import eventHub from '@/common/eventHub';
  wepy.component({
    data: {
      items:[],
      isEnd:false,
      isLoading:false,
      page:1,
    },
    externalClasses:[
      'external-cls'
    ],
    props:{
      threshold:{
        type:Number,
        default:1000
      },
      url:String,
      eventName:{
        type:String,
        default:'clistwrap'
      }
    },
    events: {

    },
    computed:{

    },
    methods: {
      intersectionCb(res){
        const {isLoading,isEnd, threshold} = this;
        res.intersectionRatio // 相交区域占目标节点的布局区域的比例
        res.intersectionRect // 相交区域
        res.intersectionRect.left // 相交区域的左边界坐标
        res.intersectionRect.top // 相交区域的上边界坐标
        res.intersectionRect.width // 相交区域的宽度
        res.intersectionRect.height // 相交区域的高度

        console.log('relativeToViewport',res,res.boundingClientRect.top )
        const canload = res.boundingClientRect.top

        // this.getRect().then(rect=>{
          console.log("rect", this,this.$slots);
          console.log("recboundingClientRectt", res.boundingClientRect.top)
        // })
        if(!isLoading && !isEnd ){
          this.getData();
        }
      },

      request(url){
        return new Promise((res , rej) => {
          setTimeout(()=>{
            let arr = []
            for(let i = 0 ; i < 10 ; i++){
              arr.push({
                text:`arr text z; ${i}`,
                date:Date.now(),
                id:Math.random() * 100 ,
              })
            }
            const data = {
              status:200,
              data:{
                items:arr,
              }
            }
            res(data);
          },1000);
        });
      },
      getData(){
        this.isLoading = true;
        const {eventName, url, items , page} = this;
        this.request().then(({data:{items:res}}) => {
          const _items = [...items, ...res];
          if(_items.length > 125){


            this.isLoading = false;
            this.isEnd = true;

            if(this.ob){
              this.ob.disconnect();
            }


          }else{

            this.isLoading = false;
            this.items = _items;

            eventHub.$emit(eventName, { items:_items});
          }

        }).catch(err=>{
          console.log('err',err)
        });


      },
    },
    created() {
      console.log('created');
      this.ob = wx.createIntersectionObserver(this.$wx, {
        thresholds:[0,1]
      });
    },
    attached() {
      console.log('attached');
      const {threshold} = this;
      this.ob.relativeToViewport({bottom: 0}).observe('.CListWrap-dst', this.intersectionCb.bind(this))
    }
  });
</script>
<style lang="scss">
  .CListWrap {

  }

  .CListWrap-wrap {

  }

  .CListWrap-wrap-item {
    flex: 1;
  }

  .CListWrap-dst{
    height: 100px;
    background-color: #CCCCCC;
    font-size: 30rpx;
    text-align: center;
  }

</style>
