<template>
  <div class="page taskPage">
    <div class="row1">
      <div class="col1">
        {{ today }}
      </div>
      <div class="col2">
        <span> {{ comp }}</span>
        /
        <span> {{ total }}</span>
      </div>
    </div>

    <CListWrap1
      :type="type"
      :params="params1"
      url="/api/my/getLearnPlanList"
      @loaded="onLoaded"
    >
      <TaskItem
        v-for="item in clist1"
        :key="item.id"
        :task="item"
        @btn="onBtn"
        external-cls="TaskItem"
      />
    </CListWrap1>
  </div>
</template>

<script>
import wepy from '@wepy/core';
import store from 'store';
import { mapGetters, mapMutations } from '@wepy/x';
import { formatLocalDateTime } from '@/common/utils';
import { learnPlanUpdate } from '@/http/http-business';

const type = 'taskpage-list1';

wepy.page({
  store,
  config: {
    navigationBarTitleText: ''
  },
  computed: {
    ...mapGetters(['items', 'user']),
    clist1() {
      const list = this.items[this.type];
      return list || [];
    },
    params1() {
      return {
        userId: this.user.id
        // planState: 0
      };
    },
    comp() {
      return this.clist1.filter(f => f.planState != 0).length;
    },
    today() {
      return formatLocalDateTime();
    }
  },
  data: {
    total: 0,
    type
  },
  methods: {
    ...mapMutations(['setItems']),
    onLoaded(res) {
      this.total = res.total || 0;
    },
    onBtn(task) {
      if (task.planState == 0) {
        learnPlanUpdate(task.id).then(res => {
          const list = this.items[this.type].map(f => {
            if (f.id === task.id) {
              f.planState = 1;
            }
            return f;
          });
          this.setItems({
            items: list,
            type: this.type,
            reset: true
          });
        });
      }
    }
  },
  onShow() {}
});
</script>
<style lang="scss">
page {
  background: rgba(242, 242, 242, 1);
}

.taskPage {
  display: flex;
  flex-direction: column;
  align-items: center;
  .row1 {
    width: 750rpx;
    height: 100rpx;
    background: rgba(255, 255, 255, 1);
    box-shadow: 0rpx 4rpx 12rpx 0rpx rgba(0, 0, 0, 0.08);
    padding: 30rpx 40rpx;
    box-sizing: border-box;
    display: flex;
    justify-content: space-between;
    align-items: center;
    .col1 {
      font-size: 28rpx;
      line-height: 40rpx;

      font-size: 28rpx;
      font-family: PingFangSC-Semibold, PingFang SC;
      font-weight: 600;
      color: rgba(79, 172, 27, 1);
    }

    .col2 {
      display: flex;
      align-items: center;
      font-size: 32rpx;
      font-family: PingFangSC-Semibold, PingFang SC;
      font-weight: 600;
      color: rgba(153, 153, 153, 1);
      > label:first-child {
        font-size: 48rpx;
        font-family: PingFangSC-Semibold, PingFang SC;
        font-weight: 600;
        color: rgba(79, 172, 27, 1);
        line-height: 66rpx;
        margin-right: 12rpx;
      }
    }
  }

  .TaskItem {
    margin: 32rpx auto;
  }

  .TaskItem + .TaskItem {
    margin-top: 0;
  }
}
</style>
<config>
{
    navigationBarTitleText: '今日任务',
    usingComponents: {

  TaskItem:'~Custom/TaskItem',
  CListWrap1:'~UI/CListWrap1',

    }
}
</config>
