<template>
  <div class="page learnPlan">
    <div class="header">
      <CTab type="radius" :tabs="tabs"
            @changeTab="handleTab"
            external-cls="ctab"/>

      <IconText @click.native="onPlanShow"
                external-cls="titleIcon"
                external-img="titleImg"
                :text="iconText.text" :src="iconText.src"/>
    </div>
    <SwipeItem v-for="c in waitComp"
               external-cls="row1"
               :disabled="disabled"
      :text1="c.text1"
      :text2="c.text2"
    />

    <CPopup  :show="planShow"
             position="bottom"
             @close="planShow=false"
             zIndex="999"
             overlay="{{ true }}">
      <div class="learn">
        <HeaderClose text="添加计划"  external-cls="header" @click="planShow=false"/>
        <div class="body">
          <CTopLabelInput label="计划内容" placeholder="准备学点啥，如学习申论第一章" external-cls="row"
                          @update="handlelearnContent"
                          :val.sync="learnContent"/>
          <CTopLabelInput label="设置提醒时间" placeholder="到时会提醒您学习" :btn="timeTip" @clickBtn="handleLearnTip"
                          :val.sync="learnTip"
                          readonly="{{true}}"
                          @update="handlelearnTip"
                          external-cls="row"/>
          <CButton text="确认添加"  @tap.native="handleStartLearn" external-cls="row"/>
        </div>
      </div>
    </CPopup>
    <CPopup  :show="timeShow"
             position="bottom"
             @close="timeShow=false"
             zIndex="1000"
             overlay="{{ true }}">
      <div class="time">
        <HeaderClose text="选择学习时间"  external-cls="header" @click="timeShow=false"/>
        <div class="body">
          <CTimePickerView @change="hanleTime" external-cls="row1"/>
          <CButton text="确认"  @tap.native="handleSetTime" external-cls="row2"/>
        </div>

      </div>

    </CPopup>
  </div>
</template>

<script>
  import wepy from '@wepy/core';
  import store from 'store';
  import {getImgUrlEx,isEmptyString} from '@/common/utils';
  import { learnPlanAdd } from '@/http/http-business';
  import {navToPage} from '@/common/navUtils';
  import { mapGetters , mapState} from '@wepy/x';

  wepy.page({
    store,
    config: {
      navigationBarTitleText: ''
    },
    computed: {
      ...mapGetters([ 'user']),

      timeTip(){
        if(this.time && this.time.length > 0){
          const time = this.time;

          let v = '';
          if (this.time[0] > 0) {
            v = `${this.time[0]}小时`;
          }
          if (this.time[1] > 0) {
            v += `${this.time[1]}分钟`;
          }

          return v;
        }

        return '去设置';
      }

    },
    data: {
      tabs:[
        {text:'待完成'},
        {text:'已完成'},
      ],
      selectedTab:0,
      iconText:{
        text:'添加计划',
        src:'btn_add_plan@3x'
      },
      waitComp:[

      ],
      disabled:false,
      planShow:false,

      timeShow:false,
      time:[],
      setTime:[],

      learnContent:'sdf',
      learnTip:''
    },
    methods: {
      handleTab({tab ,index}){
        this.selectedTab = index
        this.disabled = index != 0;
      },
      handleLearnTip(){
        this.timeShow = true;
      },
      handleStartLearn(){
        const verify = () => {
          const t = !!this.time && this.time[0] > 0 || this.time[1] > 0 ;
          if(!isEmptyString(this.learnContent) && t ){
            return true;
          }

          return false;
        }



        if(verify()){
          let totalT = this.time[0] * 60 + this.time[1];
          learnPlanAdd(this.user.id , this.learnContent , totalT).then(res => {
            const t = this.time;
            if(t && t.length == 2){
              const offset = (t[0] * 3600 + t[1] * 60) * 1000
              navToPage('/pages/section1/timer' , {
                startTime:new Date().getTime(),
                endTime:(new Date().getTime() + offset)
              })
            }
          })


        }else{
          showMsg('内容不全');
        }
      },
      onPlanShow(){
        this.planShow = true;
        this.learnTip = '';
        this.learnContent = '';
        this.setTime = [];
        this.time = [];
      },
      handlelearnContent(v){
        this.learnContent = v;
      },
      handlelearnTip(v){
        this.learnTip = v;
      },
      hanleTime(v){
        console.log('time:' , v)
        this.setTime = v;
      },
      handleSetTime(){
        this.timeShow = false;
        this.time = this.setTime;

        if(this.time.length == 2){
          let v = '';
          if (this.time[0] > 0) {
            v = `${this.time[0]}小时`;
          }
          if (this.time[1] > 0) {
            v += `${this.time[1]}分钟`;
          }
          this.learnTip = `完成${v}学习后暂停且提醒结束计时`;
        }
      }
    },
    onShow(){

    },
    created () {
      this.iconText.src = getImgUrlEx(this.iconText.src);

      const res = [];
      for(let i = 0 ; i < 10 ; i++){
        const obj = {
          text1:`学习申论-第四章`,
          text2:`明天 10:30`,
          disabled:i%2
        }
        res.push(obj);
      }

      this.waitComp = res;
    }
  });
</script>
<style lang="scss">
  @import "~newBase";
  .learnPlan{
    background-color: $pageBg;
    overflow-y: auto;
    .header{
      padding: 0 30rpx;
      height: 144rpx;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: $white;
      .ctab{
        width: 460rpx;
      }
      .titleIcon{
        font-size:28rpx;
        font-weight:400;
        color:$primaryColor;
        line-height:28rpx;
        >image{
          width: 44rpx;
          height: 48rpx;
          margin-bottom: 16rpx;
        }
      }
      .titleImg{

      }


    }

    .row1{
      margin-top: 24rpx;
    }

    .learn{
      height: auto;
      .body{
        display: flex;
        flex-direction: column;
        align-items: center;
        .row{
          margin-top: 46rpx;
          margin-bottom: 42rpx;
        }
      }
    }

    .time{

      .body{
        display: flex;
        flex-direction: column;
        align-items: center;
        .row1{
          margin: 62rpx 0 64rpx 0;
        }

        .row2{
          margin-bottom: 62rpx;
        }
      }

    }

  }
</style>
<config>
{
    navigationBarTitleText: '',
    usingComponents: {

  CTab:'~UI/CTab',

  IconText:'~Custom/IconText',
  SwipeItem:'~Custom/SwipeItem',
  CPopup:'~UI/CPopup',
  HeaderClose:'~Custom/HeaderClose',
  CTopLabelInput:'~UI/CTopLabelInput',
  CButton:'~UI/CButton',
  CTimePickerView:'~UI/CTimePickerView'
    }
}
</config>
