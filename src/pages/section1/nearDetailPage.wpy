<template>
  <div class="page nearDetailPage">
    <div class="header">
      <div class="row1">
        <CircleIconButton :src="commentIcon" @click.native="handleIconBtn($event)" data-set="comment"/>
        <TagHeaderCircleImg :tag="user.tag"/>
        <CircleIconButton :src="likeIcon" @click.native="handleIconBtn($event)" data-set="heart"/>
      </div>
      <div class="row2">
        <image :src="sexType" mode="aspectFit"></image>
        <span>{{user.school}}</span>
      </div>

      <div class="row3">
       {{user.dest}}
      </div>

    </div>
    <div class="content">
      <div class="col1">
        <span>
          {{user.jifen}}
        </span>
        <span>
          积分
        </span>
      </div>
      <div class="col1">
        <span>
          {{user.fans}}
        </span>
        <span>
          粉丝
        </span>
      </div>
      <div class="col1">
        <span>
          {{user.tiezi}}
        </span>
        <span>
          帖子
        </span>
      </div>
    </div>

    <LunTanMsgItem v-for="item in msgItems" :key="item.id"
                   :title="item.title"
                   :name="item.name"
                   :readerNum="item.readerNum"
                   :type="item.type"
                   :publishDate="item.publishDate"
                   @click.native="handleMsgItem(item)"
    />


    <CPopup  :show="show"
             position="bottom"
             @close="show=false"
             zIndex="1000"
             overlay="{{ true }}">
      <div class="time">
        <HeaderClose text="私信"  external-cls="header" @click="show=false"/>
        <div class="body">

         <textarea @input="bindinput($event)" placeholder="请输入内容"
                   maxlength="200"
              class="textarea"/>
          <div class="inputNum">
            {{inputNum}}/200
          </div>
          <CButton text="发送"  @tap.native="handleSubmit" external-cls="row2"/>
        </div>

      </div>

    </CPopup>
  </div>
</template>

<script>
  import wepy from '@wepy/core';
  import store from 'store';
  import {getImgUrlEx} from '@/common/utils';

  wepy.page({
    store,
    config: {
      navigationBarTitleText: ''
    },
    computed: {
      likeIcon(){
        if(this.user.like){
          return this.heartSelIcon;
        }

        return this.heartIcon;
      },

      sexType(){
        if(this.user.sex == 'men'){
          return  this.men;
        }
        return this.women;
      },
      inputNum(){
        return this.inputVal.length;
      }
    },
    data: {
      user:{
        like:false,
        tag:'学神',
        sex:'men',
        dest:'目标：学习申论和行测',
        school:'浙江理工大学',
        jifen:'2000',
        fans:'60',
        tiezi:'20'
      },
      commentIcon:'btn_msg@3x',
      heartIcon:'btn_like@3x',
      heartSelIcon:'btn_liked@3x',
      men:'icon_men@3x',
      women:'icon_women@3x',
      msgItems:[],
      show:false,
      inputVal:''
    },
    methods: {
      handleIconBtn(e){
        const type = e.$wx.target.dataset.set;
        console.log('type:' , type)
        if(type == 'comment'){
          this.show = true;
        }else{
          this.user.like = !this.user.like;
        }
      },
      handleMsgItem(item){

      },
      handleSubmit(){
        this.show = false;
      },
      bindinput(e){
        console.log(e);

        this.inputVal = e.$wx.detail.value;
      }
    },
    onShow(){
      
    },
    created () {
      this.commentIcon = getImgUrlEx(this.commentIcon);
      this.heartIcon = getImgUrlEx(this.heartIcon);
      this.heartSelIcon = getImgUrlEx(this.heartSelIcon);
      this.men = getImgUrlEx(this.men);
      this.women = getImgUrlEx(this.women);



      const arr = [];
      for(let i = 0 ; i < 2 ; i++){
        const v = {
          title:'[学习交流] 麻烦大神帮忙看看这种不限定主体和文种的论述题该怎么组织答案呢？',
          name:'Smile',
          readerNum:'123213',
          publishDate:'2019-08-12',
          id:i,
          type:'comment'
        }

        arr.push(v);
      }

      this.msgItems = arr;
    }
  });
</script>
<style lang="scss">

  .nearDetailPage{

    background:rgba(242,242,242,1);
    .header{

      background:rgba(255,255,255,1);
      font-size:24rpx;
      font-family:PingFangSC-Regular,PingFangSC;
      font-weight:400;
      color:rgba(153,153,153,1);
      line-height:28rpx;
      position: relative;
      overflow: hidden;
      &::after{
        position: absolute;
        bottom: 0;
        left:50%;
        transform: translateX(-50%);
        width: 750rpx;
        height: 1px;
        background-color: #E6E6E6;
        content: '';
      }

      .row1{
        padding: 40rpx 60rpx 0;
        display: flex;
        justify-content: space-around;
        align-items: center;
        margin-bottom:28rpx;
      }

      .row2{
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom:24rpx;
        >image{
          width:32rpx;
          height:32rpx;
          margin-right:8rpx;
        }
      }

      .row3{
        margin-bottom:40rpx;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    }

    .content{
      width:750rpx;
      height:168rpx;
      display:flex;
      background:rgba(255,255,255,1);
      margin-bottom: 20rpx;
      .col1{
        flex:1;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        position: relative;

        >label:first-child{
          font-size:40rpx;
          font-family:PingFangSC-,PingFangSC;
          font-weight:normal;
          color:rgba(0,0,0,1);
          line-height:48rpx;
          margin-bottom: 20rpx;
        }

        >label:last-child{
          font-size:28rpx;
          font-family:PingFang-SC-Regular,PingFang-SC;
          font-weight:400;
          color:rgba(102,102,102,1);
          line-height:36rpx;
        }

        &:not(last-child)::after{
          position: absolute;
          content: '';
          right:0;
          top:50%;
          transform: translateY(-50%) scaleX(0.5);
          width:1rpx;
          height:104rpx;
          background:rgba(230,230,230,1);
        }

      }
    }


    .time{

      .body{
        display: flex;
        flex-direction: column;
        align-items: center;
        .row1{
          margin: 62rpx 0 64rpx 0;
        }

        .row2{
          margin-bottom: 62rpx;
        }

        .inputNum{

          font-size:24rpx;
          font-family:PingFangSC-Regular,PingFangSC;
          font-weight:400;
          color:rgba(79,172,27,1);
          line-height:24rpx;
          align-self: flex-end;
          margin-bottom:90rpx;
          margin-right: 40rpx;
        }

        .textarea{
          margin-top:40rpx;
          height: 400rpx;
          font-size:36rpx;
          font-weight:400;
          color:#4FAC1B;
          line-height:44rpx;
          caret-color: #4FAC1B;

        }
        textarea::placeholder {
          color:rgba(204,204,204,1);
        }
      }

    }


  }
</style>
<config>
{
    navigationBarTitleText: '',
    usingComponents: {
  CircleIconButton:'~Custom/CircleIconButton',
  TagHeaderCircleImg:'~Custom/TagHeaderCircleImg',
  LunTanMsgItem:'~Custom/LunTanMsgItem',
  CButton:'~UI/CButton',
  CPopup:'~UI/CPopup',
  HeaderClose:'~Custom/HeaderClose',
    }
}
</config>
