<template>
  <div class="page mediaPlayDetail">
    <div class="row1">
      {{ media.titel }}
    </div>
    <image :src="teacher.header" class="row2" mode="aspectFit" />
    <CSlider
      :max="totalTime"
      :val="currentTime"
      @change="onDragSlider"
      :draggable="isCur"
    />
    <div class="row3">
      <IconText
        @click.native="handleIconText"
        external-cls="titleIcon titleIcon1"
        data-set="list"
        text="播放列表"
        src="btn_list@3x"
      />
      <PlayController
        @onPre="onPre"
        @onNext="onNext"
        :isPlaying="isPlaying"
        @onPlay="onPlayControllerPlay"
      />
      <IconText
        @click.native="handleIconText"
        external-cls="titleIcon titleIcon2"
        data-set="share"
        text="分享课程"
        src="btn_bottom_share@3x"
      />
    </div>

    <ClassCard
      :title="audioSubject.viceTitle"
      :info="classCardInfo"
      selfNav
      text="进入课程"
      external-cls="classCard"
      @click="onClassCard"
    />

    <FixedBottomComment
      :commentNum="media.scoreNum"
      :likeNum="media.collectNum"
      :liked="media.liked"
      @change="onInput"
      @comment="onComment"
      @like="onLike"
    />

    <CPopup
      :show="show"
      position="bottom"
      @close="show = false"
      zIndex="999"
      overlay="{{ true }}"
    >
      <div class="getup">
        <HeaderClose
          text="播放列表"
          external-cls="header"
          @click="show = false"
          icon="btn_list@3x"
        />
        <MediaPlayItem
          v-for="(item, i) in clist"
          :key="item.id"
          :title="item.titel"
          :time="item.audioTimeSize"
          :desc="item.desc"
          sel="{{playIndex == i}}"
          @click="onList(i)"
        />
      </div>
    </CPopup>
  </div>
</template>

<script>
import wepy from '@wepy/core';
import store from 'store';
import { mapGetters, mapMutations } from '@wepy/x';
import { getImgUrlEx } from '@/common/utils';
import { audioConnect, audio } from '@/common/audio';
import { navToPage, navBack } from '@/common/navUtils';

import { mediaPlayListType } from '@/common/constant';
const type = mediaPlayListType;

wepy.page({
  store,
  config: {
    navigationBarTitleText: ''
  },
  watch: {
    'audioInfo.totalTime'(v, ov) {
      console.log(v, ov);
    }
  },
  computed: {
    ...mapGetters([
      'audioInfo',
      'items',
      'teacher',
      'playAudioInfo',
      'audioSubject'
    ]),
    clist() {
      const list = this.items[type];
      return list || [];
    },
    playIndex() {
      if (this.playAudioInfo && this.clist.length > 0) {
        const cur = this.clist.findIndex(c => c.id === this.playAudioInfo.id);
        return cur;
      }

      return -1;
    },
    isPlaying() {
      if (
        this.media &&
        this.playAudioInfo &&
        this.media.id === this.playAudioInfo.id &&
        this.audioInfo &&
        this.audioInfo.isPlaying
      ) {
        return true;
      }

      return false;
    },
    classCardInfo() {
      return `已更新 ${this.audioSubject.userAnswerNum} 讲`;
    },
    totalTime() {
      return this.isCur ? this.audioInfo.totalTime : 0;
    },
    currentTime() {
      return this.isCur ? this.audioInfo.currentTime : 0;
    },
    isCur() {
      return this.playAudioInfo && this.playAudioInfo.id === this.media.id;
    }
  },
  data: {
    items1: [],
    items2: [],
    show: false,
    media: {},
    type
  },
  methods: {
    ...mapMutations([
      'setShowMediaPlay',
      'setPlayMedia',
      'setMediaPlaying',
      'setPlayAudioInfo'
    ]),
    onClassCard() {
      navBack();
    },
    onInput(v) {
      navToPage('/pages/section2/mediaSubmitCommentPage', {
        subjectId: this.audioSubject.id
      });
    },
    onComment(v) {
      navToPage('/pages/section2/mediaCommentPage', {
        subjectId: this.audioSubject.id
      });
    },
    onLike(v) {
      this.detail.liked = v;
    },
    handleIconText(e) {
      const type = e.$wx.target.dataset.set;
      if (type == 'list') {
        this.show = true;
      } else {
      }
    },
    onList(i) {
      this.play(i);
    },
    play(i) {
      const media = this.clist[i];
      this.media = media;
      audioConnect.play(media);
    },
    onPre() {
      const cur = this.clist.findIndex(c => c.id === this.media.id);
      if (cur > 0) {
        this.play(cur - 1);
      }
    },
    onNext() {
      const cur = this.clist.findIndex(c => c.id === this.media.id);
      if (cur < this.clist.length - 1 && cur > -1) {
        this.play(cur + 1);
      }
    },
    onPlayControllerPlay() {
      audioConnect.play(this.media);
    },
    onDragSlider(v) {
      this.isCur && audioConnect.seek(v);
    }
  },
  onShow() {},
  onLoad(query = {}) {
    this.media = JSON.parse(query.media);
  }
});
</script>
<style lang="scss">
.mediaPlayDetail {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: auto;
  .row1 {
    font-size: 40rpx;
    font-family: PingFangSCSemibold-, PingFangSCSemibold;
    font-weight: normal;
    color: rgba(0, 0, 0, 1);
    line-height: 48rpx;
    margin: 60rpx 0 64rpx;
  }
  .row2 {
    width: 400rpx;
    height: 500rpx;
    box-shadow: 0px 16rpx 32rpx -4rpx rgba(0, 0, 0, 0.2);
    border-radius: 8rpx;
    margin-bottom: 80rpx;
  }

  .row3 {
    display: flex;
    margin: 120rpx 40rpx 80rpx;
    justify-content: space-between;
    align-self: stretch;
    .titleIcon {
      margin-top: 30rpx;
      > image {
        width: 48rpx;
        height: 48rpx;
        margin-bottom: 16rpx;
      }

      font-size: 24rpx;
      font-family: PingFang-SC-Regular, PingFang-SC;
      font-weight: 400;
      color: rgba(98, 100, 102, 1);
      line-height: 32rpx;
    }
  }

  .classCard {
    background: rgba(242, 242, 242, 1);
    margin-bottom: 24rpx;
  }

  .getup {
    height: 920rpx;
  }
}
</style>
<config>
  {
  navigationBarTitleText: '',
  usingComponents: {
  CSlider:'~UI/CSlider',
  PlayController:'~Custom/PlayController',
  IconText:'~Custom/IconText',
  ClassCard:'~Custom/ClassCard',
  MediaPlayItem:'~Custom/MediaPlayItem',
  FixedBottomComment:'~Custom/FixedBottomComment',
  HeaderClose:'~Custom/HeaderClose',
  CPopup:'~UI/CPopup',
  }
  }
</config>
