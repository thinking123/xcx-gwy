<template>
  <div class="page timu" :class="{ 'timu--night': timuConfig.night }">
    <timuHeader
      showSwitch="{{timuConfig.cuoti}}"
      @edit="onEdit"
      @change="ontimuHeader"
      :isOpen="timuConfig.night"
      day="{{50}}"
    />

    <swiper bindchange="onSwiperChange" :current="timuConfig.index">
      <swiper-item v-for="(item, index) in timuItems" :key="item.id">
        <TimuItem
          :timuItem="item"
          v-if="item"
          external-cls="TimuItem"
          :subjectId="subjectId"
          :index="index"
        />
        <div v-else class="empty-no"></div>
        <view v-if="item.hadSelected">
          <TimuAnswer external-cls="TimuAnswer" :timu="item" />
          <CommentHeader @comment="onComment" external-cls="CommentHeader" />

          <CListWrap1
            :type="typeId"
            :params="params"
            url="/api/subjecAudio/getSubjectScore"
          >
            <MediaCommentItem
              v-for="item1 in clist"
              :key="item1.id"
              :user="item1"
              external-cls="MediaCommentItem"
            />
          </CListWrap1>
        </view>
      </swiper-item>
    </swiper>
    <CPopup
      :show="show"
      position="bottom"
      @close="show = false"
      zIndex="999"
      overlay="{{ true }}"
    >
      <div class="learn">
        <HeaderClose
          text="记笔记"
          external-cls="header"
          @click="show = false"
        />
        <div class="body">
          <CTextarea
            :val="editText"
            @change="onChange"
            placeholder="请填写您想记录的内容"
            total="{{200}}"
            showLine="{{false}}"
          />
          <CButton text="确认" @tap.native="onSubmit" external-cls="row" />
        </div>
      </div>
    </CPopup>
    <CPopup
      :show="showCompleted"
      position="bottom"
      @close="showCompleted = false"
      zIndex="999"
      overlay="{{ true }}"
    >
      <div class="TimuCompletedTip">
        <TimuCompletedTip
          rightRate="{{timuConfig.rightRate}}"
          rightNum="{{timuConfig.rightNum}}"
          wrongNum="{{timuConfig.wrongNum}}"
          :showCompleted="showCompleted"
        />
      </div>
    </CPopup>

    <TimuTip />
    <TimuNav @change="nextPreTimu" />
  </div>
</template>

<script>
import wepy from '@wepy/core';
import store from 'store';
import { mapGetters, mapMutations } from '@wepy/x';
import { getQuestionList } from '@/http/http-business';
import { navToPage } from '@/common/navUtils';
import eventHub from '@/common/eventHub';

const type = 'timu-list';
wepy.page({
  store,
  computed: {
    ...mapGetters(['items', 'curTimu', 'timuConfig', 'timuItems']),
    params() {
      return {
        subjectListId: this.curTimu ? this.curTimu.subjectId : ''
      };
    },
    typeId() {
      const id = `${type}__${this.curTimu ? this.curTimu.id : ''}`;
      return id;
    },
    clist() {
      const list = this.items[this.typeId];
      return list || [];
    },
    curIndex() {
      return this.timuConfig.index;
    },

    citems() {
      /**
       *      const inThree = d => {
        const i = this.curIndex;
        return (
          d >= (i - 1 < 0 ? 0 : i - 1) &&
          d < (i + 2 > this.items.length ? this.items.length : i + 2)
        );
      };
      const res = new Array(this.items.length);
      for (let j = 0; j < this.items.length; j++) {
        const r = this.items[j];
        if (r.hadSelected || inThree(j)) {
          res[j] = r;
        }
      }

      return res;
       */
      const i = this.curIndex;
      const cs = this.timuItems.slice(
        i - 1 < 0 ? 0 : i - 1,
        i + 2 > this.timuItems.length ? this.timuItems.length : i + 2
      );

      const arr = new Array(this.timuItems.length);
      arr.splice(i, i == 0 || i == this.timuItems.length - 1 ? 2 : 3, ...cs);
      return arr;
      // return this.timuItems;
    }
  },
  data: {
    cuoti: true,
    show: false,
    showCompleted: false,
    showNav: true,
    editText: '',
    subjectId: ''
  },
  methods: {
    ...mapMutations(['setTimuItems', 'setTimuConfig']),
    onSwiperChange(e) {
      const { current, source } = e.$wx.detail;
      if (source == 'touch') {
        this.nextPreTimu(current);
      }
    },
    ontimuHeader(v) {
      if (v) {
        wx.setNavigationBarColor({
          backgroundColor: '#222324',
          frontColor: '#ffffff'
        });
      } else {
        wx.setNavigationBarColor({
          backgroundColor: '#F2F2F2',
          frontColor: '#000000'
        });
      }
    },
    onEdit() {
      this.show = true;
    },
    nextPreTimu(index) {
      if (this.curTimu.hadSelected || index < this.timuConfig.index) {
        this.setTimuConfig({
          index
        });
        if (index > this.timuItems.length - 2) {
          // this.getItems({});
        }
      } else {
        this.setTimuConfig({
          index: this.timuConfig.index
        });
      }
    },
    onChange(v) {
      this.editText = v;
    },
    onSubmit() {
      this.show = false;
    },
    getItems(p) {
      getQuestionList(this.subjectId).then(res => {
        res = res.map(m => {
          // 还没有答题过
          m.hadSelected = false;
          return m;
        });
        let arr = [];
        if (p) {
          arr = [...this.timuItems, ...res];
        } else {
          arr = res;
        }

        this.setTimuConfig({
          total: arr.length
        });
        this.setTimuItems(arr);
      });
    },
    onComment(v) {
      navToPage('/pages/section2/mediaCommentPage', {
        subjectId: this.curTimu.subjectId
      });
    }
  },
  onShow() {},
  onLoad(query = {}) {
    let { referrer, subjectId, item } = query;
    this.subjectId = subjectId;
    item = JSON.parse(item);
    this.setTimuConfig({
      total: item.questionNum || 5,
      title: item.title
    });
    if (referrer && referrer.indexOf('timuCuoti')) {
      this.setTimuConfig({
        cuoti: true
      });
    }
    this.getItems();
    eventHub.$on('showCompleted', showCompleted => {
      this.showCompleted = true;
    });
  },
  onUnload() {
    this.setTimuItems([]);
    this.setTimuConfig({
      index: 0
    });
    eventHub.$off('showCompleted');
  }
});
</script>
<style lang="scss">
page {
  background: rgba(242, 242, 242, 1);
}

.answer-wrap {
  padding: 40rpx 30rpx;
}
.empty-no {
  width: 690rpx;
  height: 100px;
}

.timu {
  height: auto;
}

.timu--night {
  background: rgba(34, 35, 36, 1) !important;
}
.CSwipeList {
}

.TimuItem {
  margin: 32rpx 30rpx;
}

.learn {
  height: 712rpx;
  .body {
    display: flex;
    flex-direction: column;
    align-items: center;
    .row {
      margin-top: 46rpx;
    }
  }
}
.TimuCompletedTip {
  height: 712rpx;
}
.TimuAnswer {
  margin-bottom: 32rpx;
  padding: 40rpx 30rpx;
}

.CommentHeader {
  left: 50%;
  transform: translateX(-50%);
  width: 750rpx;
}
.MediaCommentItem {
  left: 50%;
  transform: translateX(-50%);
  width: 750rpx;
  background-color: #fff;
}

swiper {
  height: 750px;
}
</style>
<config>
  {
  navigationBarTitleText: '逻辑填空',
  usingComponents: {
  timuHeader:'~Custom/timuHeader',
  CSwipeList:'~UI/CSwipeList/index',
  HeaderClose:'~Custom/HeaderClose',
  TimuItem:'~Custom/TimuItem',
  TimuTip:'~Custom/TimuTip',
  TimuCompletedTip:'~Custom/TimuCompletedTip',
  TimuNav:'~Custom/TimuNav',
  CTextarea:'~UI/CTextarea',
  CButton:'~UI/CButton',
  CPopup:'~UI/CPopup',

  TimuAnswer:'~Custom/TimuAnswer',
  CommentHeader:'~Custom/CommentHeader',
  MediaCommentItem:'~Custom/MediaCommentItem',
  CListWrap1:'~UI/CListWrap1',
  }
  }
</config>
