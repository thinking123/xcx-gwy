<template>
  <div class="page home">
    <LearningFloat external-cls="LearningFloat"/>
    <div class="signed" v-if="isSigned">
      <CCircleImg external-cls="cirImg">
        <open-data type="userAvatarUrl"></open-data>
      </CCircleImg>
      <div class="title">
        <div class="row1">
          <span>nickName</span>
          <CTag text="登录"/>
        </div>
        <div class="row2">

        </div>
      </div>
      <div class="right">

      </div>
    </div>
    <div class="notSigned" v-else>
      <CCircleImg external-cls="cirImg"/>
      <span class="title">Hi，欢迎来到开通联众</span>
      <CButton text="登录"
               @tap.native="handleSign"
               type="info"
               external-cls="signBtn"/>
    </div>
    <div class="title">
      学习打卡
    </div>
    <div class="map">

    </div>
    <div class="titleIcons">
        <IconText v-for="(item , index) in titleIcons"
                  @click.native="handleIconText(index)"
                  external-cls="titleIcon"
                  :text="item.text" :src="item.src"/>
    </div>
    <div class="line">

    </div>
    <div class="panelIcons">
      <image v-for="(item , index) in panelIcons"
             @click="handleImage(index)"
             :src="item"/>
    </div>
    <CTabbar/>
    <CPopup  :show="getupShow"
             position="bottom"
             @close="getupShow=false"
             zIndex="999"
             overlay="{{ true }}">
      <div class="getup">
        <HeaderClose text="起床睡觉"  external-cls="header" @click="getupShow=false"/>
        <CButton text="起床" :icon="getupicon1" @tap.native="handleWxClick"
                 external-cls="btn1"/>
        <CButton text="睡觉" :icon="getupicon2" @tap.native="handleWxClick"
                 external-cls="btn2"/>
      </div>
    </CPopup>
    <CPopup  :show="learnShow"
             position="bottom"
             @close="learnShow=false"
             zIndex="999"
             overlay="{{ true }}">
    <div class="learn">
      <HeaderClose text="学习计时"  external-cls="header" @click="learnShow=false"/>
      <div class="body">
        <CTopLabelInput label="本次学习内容" placeholder="本次学习内容，如：学申论" external-cls="row"
                        @update="handlelearnContent"
                        :val.sync="learnContent"/>
        <CTopLabelInput label="设置学习结束提醒" placeholder="到时会提醒学习结束" :btn="timeTip" @clickBtn="handleLearnTip"
                        :val.sync="learnTip"
                        @update="handlelearnTip"
                        external-cls="row"/>
        <CButton text="开始学习"  @tap.native="handleStartLearn" external-cls="row"/>
      </div>
    </div>
    </CPopup>
    <CPopup  :show="timeShow"
             position="bottom"
             @close="timeShow=false"
             zIndex="1000"
             overlay="{{ true }}">
      <div class="time">
        <HeaderClose text="选择学习时间"  external-cls="header" @click="timeShow=false"/>
        <div class="body">
          <CTimePickerView @change="hanleTime" external-cls="row1"/>
          <CButton text="确认"  @tap.native="handleSetTime" external-cls="row2"/>
        </div>

      </div>

    </CPopup>
  </div>
</template>

<script>
  import wepy from '@wepy/core';
  import store from 'store';
  import {getImgUrlEx} from '@/common/utils';
  import { mapGetters , mapState} from '@wepy/x';
  import {navToPage} from '@/common/navUtils';

  wepy.page({
    store,
    config: {
      navigationBarTitleText: ''
    },
    computed: {
      ...mapGetters(['isSigned']),
      ...mapState(['nickName']),
      timeTip(){
        if(this.time && this.time.length > 0){
          const time = this.time;
          const t = time[0] * 60 + time[1];

          return `${t}分钟`;
        }

        return '去设置';
      }
    },
    data: {
      titleIcons:[
        {
          text:'起床睡觉',
          src:'home_icon_nav01.png'
        },
        {
          text:'学习计时',
          src:'home_icon_nav02.png'
        },
        {
          text:'学习日记',
          src:'home_icon_nav03.png'
        },
        {
          text:'学习计划',
          src:'home_icon_nav04.png'
        }
      ],
      panelIcons:[
        'home_img_huiyuan@3x.png',
        'home_img_kaiming@3x.png',
        'home_img_luntan@3x.png',
        'home_img_fujin@3x.png',
      ],
      getupShow:false,
      getupicon1:'icon_get_up@3x',
      getupicon2:'icon_sleep@3x',
      learnShow:false,

      timeShow:false,
      time:[],
      setTime:[],
      learnContent:'sdf',
      learnTip:''
    },
    methods: {
      handleSign(){
        navToPage('/pages/login/login')
      },
      handleIconText(index){
        switch (index) {
          case 0:
            this.getupShow = true;
            break;
          case 1:
            this.learnShow = true;
            break;
          case 2:
            navToPage('/pages/section1/learnLog')
            break;
          case 3:
            navToPage('/pages/section1/learnPlan')
            break;
        }
      },
      handleImage(index){
        switch (index) {
          case 0:
            navToPage('/pages/section1/MemberCenter')
            break;
          case 1:
            navToPage('/pages/section1/learnLog')
            break;
          case 2:
            navToPage('/pages/section1/learnLog')
            break;
          case 3:
            navToPage('/pages/section1/learnPlan')
            break;
        }
      },
      handleLearnTip(){
        this.timeShow = true;
      },
      handleStartLearn(){
        const t = this.time;
        if(t && t.length == 2){
          const offset = (t[0] * 3600 + t[1] * 60) * 1000
          navToPage('/pages/section1/timer' , {
            startTime:new Date().getTime(),
            endTime:(new Date().getTime() + offset)
          })
        }

      },
      handlelearnContent(v){
        this.learnContent = v;
      },
      handlelearnTip(v){
        this.learnTip = v;
      },
      hanleTime(v){
        console.log('time:' , v)
        this.setTime = v;
      },
      handleSetTime(){
        this.timeShow = false;
        this.time = this.setTime;
      }
    },
    onShow(){

    },
    created () {
      this.titleIcons = this.titleIcons.map(m=>{
        m.src = getImgUrlEx(m.src)
        return m
      })
      this.panelIcons = this.panelIcons.map(getImgUrlEx)

      this.getupicon1 = getImgUrlEx(this.getupicon1)
      this.getupicon2 = getImgUrlEx(this.getupicon2)
    }
  });
</script>
<style lang="scss">
  @import "~basePage";
  @import "~baseUI";
  .home{
    width: initial;
    margin: 32rpx 30rpx 0;

    .btn1{

      width:690rpx;
      height:96rpx;
      box-shadow:0px 8px 16px -4px rgba(237,200,0,0.3);
      border-radius:48px;


      font-size:36rpx;
      font-weight:600;
      color:rgba(255,255,255,1);
      background:rgba(237,200,0,1) !important;
      border-color: rgba(237,200,0,1) !important;

      margin: 48rpx 30rpx;
    }
    .btn2{

      width:690rpx;
      height:96rpx;
      box-shadow:0px 8px 16px -4px rgba(107,144,213,0.3);
      border-radius:48px;


      font-size:36rpx;
      font-weight:600;
      color:rgba(255,255,255,1);
      background:rgba(107,144,213,1) !important;

      border-color: rgba(107,144,213,1) !important;

      margin: 48rpx 30rpx;
    }

    .getup{
      height: 472rpx;
    }

    .learn{
      height: 712rpx;
      .body{
        display: flex;
        flex-direction: column;
        align-items: center;
        .row{
          margin-top: 46rpx;
        }
      }
    }

    .time{

      .body{
        display: flex;
        flex-direction: column;
        align-items: center;
        .row1{
          margin: 62rpx 0 64rpx 0;
        }

        .row2{
          margin-bottom: 62rpx;
        }
      }

    }
    .LearningFloat{
      top: 172rpx;
      right: 10rpx;
    }
    .cirImg{
      height: 80rpx;
      width: 80rpx;
    }
  .notSigned{
      display: flex;
      align-items: center;
      justify-content: space-between;
      .title{
        margin-left: 20rpx;
        font-size:32rpx;
        font-weight:normal;
        color:#000000;
        line-height:32rpx;
        flex:1;
        margin-left: 20rpx;
      }

    .signBtn{
      width:128rpx;
      height:64rpx;
      font-size:32rpx;
    }
  }

    .title{
      font-size:40rpx;
      font-weight:normal;
      color:$textBlack;
      line-height:48rpx;
      margin: 50rpx 0 32rpx;
      font-weight: bold;
    }

    .map{
      margin-bottom: 32rpx;
      width: 690rpx;
      height: 380rpx;
      background-color: #A1CBFF;
      border-radius:8px;
    }

    .titleIcons{
      display: flex;
      justify-content: space-between;
      >.titleIcon{
      }
      align-items: center;
      margin-bottom: 48rpx;
    }
    .line{
      height: 24rpx;
      background-color: $pageBgGray;
      position: relative;
      width: 750rpx;
      left: 50%;
      transform: translateX(-50%);
    }
    .panelIcons{
      display: flex;
      justify-content: space-between;
      >image{
        width: 330rpx;
        height: 180rpx;
        margin-bottom: 40rpx;
      }
      >image:nth-child(1) ,>image:nth-child(2){
        margin: 48rpx 0 30rpx;
      }
      flex-wrap: wrap;
    }
  }
</style>
<config>
{
    navigationBarTitleText: '',
    usingComponents: {
      CTabbar:'~UI/CTabbar',
      CCircleImg:'~UI/CCircleImg',
      CButton:'~UI/CButton',
  CTag:'~UI/CTag',
  IconText:'~Custom/IconText',
  LearningFloat:'~Custom/LearningFloat',
  HeaderClose:'~Custom/HeaderClose',
  CPopup:'~UI/CPopup',
  CTopLabelInput:'~UI/CTopLabelInput',
  CTimePickerView:'~UI/CTimePickerView'
    }
}
</config>
